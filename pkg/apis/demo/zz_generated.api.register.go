/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package demo

import (
	"context"
	"fmt"

	"github.com/kubernetes-incubator/apiserver-builder-alpha/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	DemoFooStorage = builders.NewApiResourceWithStorage( // Resource status endpoint
		InternalFoo,
		func() runtime.Object { return &Foo{} },     // Register versioned resource
		func() runtime.Object { return &FooList{} }, // Register versioned resource list
		NewFooREST,
	)
	InternalFoo = builders.NewInternalResource(
		"foos",
		"Foo",
		func() runtime.Object { return &Foo{} },
		func() runtime.Object { return &FooList{} },
	)
	InternalFooStatus = builders.NewInternalResourceStatus(
		"foos",
		"FooStatus",
		func() runtime.Object { return &Foo{} },
		func() runtime.Object { return &FooList{} },
	)
	InternalFooBarREST = builders.NewInternalSubresource(
		"foos", "FooBar", "bar",
		func() runtime.Object { return &FooBar{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("demo.jeremyxu2010.me").WithKinds(
		InternalFoo,
		InternalFooStatus,
		InternalFooBarREST,
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
	}).AddToScheme
	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Foo struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   FooSpec
	Status FooStatus
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FooBar struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Message string
}

type FooStatus struct {
}

type FooSpec struct {
}

//
// Foo Functions and Structs
//
// +k8s:deepcopy-gen=false
type FooStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type FooStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FooList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Foo
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type FooBarList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []FooBar
}

func (Foo) NewStatus() interface{} {
	return FooStatus{}
}

func (pc *Foo) GetStatus() interface{} {
	return pc.Status
}

func (pc *Foo) SetStatus(s interface{}) {
	pc.Status = s.(FooStatus)
}

func (pc *Foo) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Foo) SetSpec(s interface{}) {
	pc.Spec = s.(FooSpec)
}

func (pc *Foo) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Foo) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Foo) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Foo.
// +k8s:deepcopy-gen=false
type FooRegistry interface {
	ListFoos(ctx context.Context, options *internalversion.ListOptions) (*FooList, error)
	GetFoo(ctx context.Context, id string, options *metav1.GetOptions) (*Foo, error)
	CreateFoo(ctx context.Context, id *Foo) (*Foo, error)
	UpdateFoo(ctx context.Context, id *Foo) (*Foo, error)
	DeleteFoo(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewFooRegistry(sp builders.StandardStorageProvider) FooRegistry {
	return &storageFoo{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageFoo struct {
	builders.StandardStorageProvider
}

func (s *storageFoo) ListFoos(ctx context.Context, options *internalversion.ListOptions) (*FooList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*FooList), err
}

func (s *storageFoo) GetFoo(ctx context.Context, id string, options *metav1.GetOptions) (*Foo, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Foo), nil
}

func (s *storageFoo) CreateFoo(ctx context.Context, object *Foo) (*Foo, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Foo), nil
}

func (s *storageFoo) UpdateFoo(ctx context.Context, object *Foo) (*Foo, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Foo), nil
}

func (s *storageFoo) DeleteFoo(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, &metav1.DeleteOptions{})
	return sync, err
}
