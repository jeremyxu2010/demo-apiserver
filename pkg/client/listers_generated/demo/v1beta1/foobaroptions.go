/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/jeremyxu2010/demo-apiserver/pkg/apis/demo/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FooBarOptionsLister helps list FooBarOptionses.
type FooBarOptionsLister interface {
	// List lists all FooBarOptionses in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.FooBarOptions, err error)
	// FooBarOptionses returns an object that can list and get FooBarOptionses.
	FooBarOptionses(namespace string) FooBarOptionsNamespaceLister
	FooBarOptionsListerExpansion
}

// fooBarOptionsLister implements the FooBarOptionsLister interface.
type fooBarOptionsLister struct {
	indexer cache.Indexer
}

// NewFooBarOptionsLister returns a new FooBarOptionsLister.
func NewFooBarOptionsLister(indexer cache.Indexer) FooBarOptionsLister {
	return &fooBarOptionsLister{indexer: indexer}
}

// List lists all FooBarOptionses in the indexer.
func (s *fooBarOptionsLister) List(selector labels.Selector) (ret []*v1beta1.FooBarOptions, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FooBarOptions))
	})
	return ret, err
}

// FooBarOptionses returns an object that can list and get FooBarOptionses.
func (s *fooBarOptionsLister) FooBarOptionses(namespace string) FooBarOptionsNamespaceLister {
	return fooBarOptionsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FooBarOptionsNamespaceLister helps list and get FooBarOptionses.
type FooBarOptionsNamespaceLister interface {
	// List lists all FooBarOptionses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.FooBarOptions, err error)
	// Get retrieves the FooBarOptions from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.FooBarOptions, error)
	FooBarOptionsNamespaceListerExpansion
}

// fooBarOptionsNamespaceLister implements the FooBarOptionsNamespaceLister
// interface.
type fooBarOptionsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FooBarOptionses in the indexer for a given namespace.
func (s fooBarOptionsNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.FooBarOptions, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FooBarOptions))
	})
	return ret, err
}

// Get retrieves the FooBarOptions from the indexer for a given namespace and name.
func (s fooBarOptionsNamespaceLister) Get(name string) (*v1beta1.FooBarOptions, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("foobaroptions"), name)
	}
	return obj.(*v1beta1.FooBarOptions), nil
}
